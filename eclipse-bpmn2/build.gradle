/* 
 * The Maven coordinates for the project artifact
 */
ext.title = "Eclipse BPMN2 Vocabularies"
description='The Eclipse BPMN2 vocabular'

apply from: "${rootDir}/gradle/maven-deployment.gradle"

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask) {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to download the bpmn2 Ecore models
 */
apply plugin: 'de.undercouch.download'

task downloadEcore() {
    doLast {
        def libsDir = file('build/libs')
        download {
        	src bpmn2 
        	dest new File(libsDir, 'org.eclipse.bpmn2.jar')
        	overwrite false
        }
        libsDir.listFiles().each { file ->
    		copy { 
    			from zipTree(file)
    			include 'model/*.ecore'
    			into 'build/ecore'
    			eachFile { path = name } 
        		includeEmptyDirs = false
        		filteringCharset = 'UTF-8'
        		// these annotation details give problems
        		filter { line -> if (line.contains("key=\"abstract\"")) return null; else return line; }
        		filter { line -> if (line.contains("key=\"group\"")) return null; else return line; }
        		filter { line -> if (line.contains("key=\"affiliation\"")) return null; else return line; }
    		}
    	}
    }
}

/*
 * A task to convert Ecore models to OML
 */
task ecoreToOml(type:io.opencaesar.ecore2oml.Ecore2OmlTask, dependsOn: [downloadEcore, downloadDependencies]) {
	// Ecore folder
	inputFolderPath = file('build/ecore')
	// OML Catalog
	outputCatalogPath = file('catalog.xml')
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, dependsOn: ecoreToOml) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL folder
    outputFolderPath = file('build/bikeshed')
    // Publish URL
    publishUrl = 'https://opencaesar.github.io/eclipse-vocabularies/bpmn'
}

/*
 * A task to generate the Bikeshed documentations in HTML
 */
task generateDocs(dependsOn: omlToBikeshed) {
    doLast {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            exec { commandLine 'build/bikeshed/publish.bat' }
        } else {
            exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
            exec { commandLine 'build/bikeshed/publish.sh' }
        }
    }
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, dependsOn: ecoreToOml) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL catalog
	outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReason(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://www.omg.org/spec/BPMN/20100524/BPMN-Bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://www.omg.org/spec/BPMN/20100524/BPMN-Bundle/classes = ALL_SUBCLASS',
		'http://www.omg.org/spec/BPMN/20100524/BPMN-Bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://www.omg.org/spec/BPMN/20100524/BPMN-Bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/reasoning.xml')
}

/*
 * Build the project
 */
tasks.named('build') {
	dependsOn owlReason
}

/*
 * Publish artifacts
 */
task omlZip(type: Zip) {
	from file('build/oml')
	from file('src/oml')
	include "www.eclipse.org/**/*.oml"
	include "www.omg.org/**/*.oml"
	destinationDirectory = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
    includeEmptyDirs = false
}

publishing.publications.maven.artifact omlZip

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
    synchronizationTasks ecoreToOml
}