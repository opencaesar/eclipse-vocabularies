/* 
 * The Maven coordinates for the project artifact
 */
description='The Eclipse vocabularies'

/*
 * The maven coordinates
 */
allprojects {
	group = 'io.opencaesar.ontologies'
	version = '0.3.0'
}

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		maven { url 'https://dl.bintray.com/opencaesar/ecore-adapter' }
		maven { url 'https://dl.bintray.com/opencaesar/owl-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/owl-adapter' }
		maven { url 'https://dl.bintray.com/opencaesar/oml' }
		jcenter()
	}
	dependencies {
		classpath 'io.opencaesar.adapters:ecore2oml-gradle:+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
		classpath 'io.opencaesar.owl:oml2owl-gradle:+'
		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:+'
		classpath 'io.opencaesar.oml:oml-merge-gradle:+'
		classpath 'de.undercouch:gradle-download-task:4.1.1'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
		// needed since gradle bintray brings an old version of xerces
		configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
	}
}

/*
 * Subprojects
 */
subprojects {
	/*
	 * The repositories to look up OML dependencies in
	 */
	repositories {
		mavenLocal()
		maven { url 'https://dl.bintray.com/opencaesar/ontologies' }
		jcenter()
	}
	
	/*
	 * Dependency versions
	 */
	ext { 
		vocabulariesVersion = '1.+' 
	}
	
	/*
	 * The configuration of OML dependencies
	 */
	configurations {
		oml
		archives
	}

	/*
	 * The dependencies
	 */
	dependencies {
		oml "io.opencaesar.ontologies:core-vocabularies:$vocabulariesVersion"
	}
}

/*
 * A task to delete the build artifacts
 */
task clean(type: Delete) {
	delete 'build'
}

task mergeAllArtifacts() {
	gradle.projectsEvaluated { dependsOn subprojects*.distZip }
	doLast {
		tasks.create('merge', io.opencaesar.oml.merge.OmlMergeTask) {
		    inputZipPaths = subprojects.configurations.oml.files.flatten()
			inputZipPaths += subprojects.configurations.archives.artifacts.files.files.flatten()
		    outputCatalogFolder = file('build/oml')}.run()
    }
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, dependsOn: mergeAllArtifacts) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL folder
	outputFolderPath = file('build/bikeshed')
	// Publish URL
	publishUrl = 'https://opencaesar.github.io/omg-vocabularies/'
}

/*
 * A task to generate the Bikeshed documentations in HTML
 */
import org.gradle.internal.os.OperatingSystem
task generateDocs(dependsOn: omlToBikeshed) {
	doLast {
		if (OperatingSystem.current().isWindows()) {
			exec { commandLine 'build/bikeshed/publish.bat' }
		} else {
			exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
			exec { commandLine 'build/bikeshed/publish.sh' }
		}
	}
}

/*
 * Publish to Maven spec
 */
apply plugin: 'maven-publish'

task prepareDistribution() {
	gradle.projectsEvaluated { dependsOn subprojects*.distZip }
	doLast {
		delete 'oml/distribution'
		tasks.create('prepare', io.opencaesar.oml.merge.OmlMergeTask) {
			inputZipPaths = subprojects.configurations.archives.artifacts.files.files.flatten()
		    outputCatalogFolder = file('build/distribution')
		}.run()
    }
}

task distZip(type: Zip, dependsOn: prepareDistribution) {
	from file('build/distribution')
	destinationDirectory = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
    includeEmptyDirs = false
    doLast {
		delete 'build/distribution'
	}
}

publishToMavenLocal.dependsOn distZip

publishing {
    publications {
        maven(MavenPublication) {
            artifact distZip
			pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                subprojects.configurations.oml.allDependencies.stream().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
    }
}

/*
 * Publish to Bintrary Spec
 */
apply plugin: 'com.jfrog.bintray'

ext.gh = [
	dep: 'https://github.com',
	org: 'opencaesar',
	rep: 'ontologies'
]

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')
	publications = ['maven']
	publish = true
	override = true
	pkg {
		name = project.name
		repo = gh.rep
		userOrg = gh.org
		desc = project.description
		licenses = ['Apache-2.0']
		websiteUrl = gh.dep+'/'+gh.org+'/'+gh.rep
        issueTrackerUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'/issues'
		vcsUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'.git'
		version {
			name = project.version
			desc = project.version
			released  = new Date()
		}
	}
}
