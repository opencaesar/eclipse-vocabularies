/* 
 * The Maven coordinates for the project artifact
 */
description='The UML vocabulary'
group = 'io.opencaesar.ontologies'
version = '1.0.0'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		maven { url 'https://dl.bintray.com/opencaesar/ecore-adapter' }
		maven { url 'https://dl.bintray.com/opencaesar/oml' }
		jcenter()
	}
	dependencies {
		classpath 'io.opencaesar.ecore:ecore2oml-gradle:+'
		classpath 'de.undercouch:gradle-download-task:4.1.1'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
	}
}

/*
 * Dependency versions
 */
ext { 
	coreVocabulary = '1.0.+' 
}

/*
 * The configuration of OML dependencies
 */
configurations {
	oml
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	maven { url 'https://dl.bintray.com/opencaesar/vocabularies' }
	jcenter()
}

/*
 * The dependencies
 */
dependencies {
	oml "io.opencaesar.ontologies:vocabularies:$coreVocabulary"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadOmlDependencies(type: Copy) {
    from configurations.oml.files.collect { zipTree(it) }
    into file('build/oml')
}

/*
 * Download the Uml2 Ecore models
 */
apply plugin: 'de.undercouch.download'

task downloadEcore() {
    def libsDir = file('build/libs')
    download { 
    	src uml2_uml 
    	dest new File(libsDir, 'org.eclipse.uml2.uml.jar')
    	overwrite false
    }
    download { 
    	src uml2_types 
    	dest new File(libsDir, 'org.eclipse.uml2.types.jar')
    	overwrite false
    }
    file(libsDir).listFiles().each { file ->
		copy { 
			from zipTree(file)
			include 'model/UML.ecore'
			include 'model/Types.ecore'
			into 'build/ecore'
			eachFile { path = name } 
    		includeEmptyDirs = false
    		filteringCharset = 'UTF-8'
    		filter { line -> line.replaceAll('platform:/plugin/org.eclipse.uml2.types/model/', '') }
		}
	}
}

/*
 * Convert Ecore models to OML
 */
task ecoreToOml(type:io.opencaesar.ecore2oml.Ecore2OmlTask, dependsOn: [downloadEcore, downloadOmlDependencies]) {
	inputFolderPath = file('build/ecore')
	outputCatalogPath = file('catalog.xml')
}

/*
 * Build the project
 */
task build {
	dependsOn ecoreToOml
}

/*
 * A task to delete the build artifacts
 */
task clean(type: Delete) {
	delete 'build'
}

/*
 * Publish to Maven spec
 */
apply plugin: 'maven-publish'

task omlZip(type: Zip) {
	from file('build/oml')
	include "www.eclipse.org/**/*.oml"
	destinationDir = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
    includeEmptyDirs = false
}

publishToMavenLocal.dependsOn omlZip

publishing {
    publications {
        maven(MavenPublication) {
            artifact omlZip
			pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.oml.allDependencies.stream().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
    }
}

/*
 * Publish to Bintrary Spec
 */
apply plugin: 'com.jfrog.bintray'

ext.gh = [
	dep: 'https://github.com',
	org: 'opencaesar',
	rep: 'uml-vocabulary'
]

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')
	publications = ['maven']
	publish = true
	override = true
	pkg {
		name = project.name
		repo = gh.rep
		userOrg = gh.org
		desc = project.description
		licenses = ['Apache-2.0']
		websiteUrl = gh.dep+'/'+gh.org+'/'+gh.rep
        issueTrackerUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'/issues'
		vcsUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'.git'
		version {
			name = project.version
			desc = project.version
			released  = new Date()
		}
	}
}
